// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma-typegraphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  password String

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  recipe           Recipe[]
  savings          Saving[]
  wishlistItems    WishlistItem[]
  expenses         Expense[]
  categories       Category[]
  salary           Salary?
  issues           Issue[]
  issueLabels      IssueLabel[]
  rawColors        RawColor[]
  mixedColors      MixedColor[]
  colorProportions ColorProportion[]
  nhFavorites      NhFavorite[]
  nhAuthors        NhAuthor[]
}

model Recipe {
  id            String @id @default(cuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  title         String
  description   String
  rating        Int?
  savedPosition Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Saving {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  value Decimal
  date  DateTime @default(now())

  selectedAsAverageMonthlyGrowth Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  itemName         String
  priceInThousands Decimal

  price Int?

  priority Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String
  value         Decimal
  rating        Int?
  benefitScore  Float?
  costScore     Float?
  date          DateTime? @default(now())
  description   String?
  timesPerMonth Decimal?

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenses Expense[]

  name    String
  bgColor String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Salary {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  value            Int
  jobHoursPerMonth Float  @default(160) // 40 hours per week, 4 weeks per month
  notes            String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  position       Int @default(1)
  solvedPosition Int @default(1)

  title     String
  solution  String
  isSolved  Boolean   @default(false)
  solvedAt  DateTime?
  frequency Int       @default(1)
  intensity Int       @default(1)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  labels    IssueLabel[]
}

model IssueLabel {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  issues Issue[]

  name    String
  bgColor String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RawColor {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name  String
  color String

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  colorProportions ColorProportion[]
}

model MixedColor {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name             String
  color            String
  colorProportions ColorProportion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ColorProportion {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mixedColor   MixedColor @relation(fields: [mixedColorId], references: [id], onDelete: Cascade)
  mixedColorId String

  rawColor   RawColor @relation(fields: [rawColorId], references: [id])
  rawColorId String

  proportion Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NhAuthor {
  url    String @id
  userId String
  user   User   @relation(fields: [userId], references: [id])

  checkedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  favorites NhFavorite[]
}

model NhFavorite {
  url       String   @id
  authorUrl String
  author    NhAuthor @relation(fields: [authorUrl], references: [url])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
